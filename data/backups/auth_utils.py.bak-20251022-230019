# auth_utils.py
from __future__ import annotations
import hmac, hashlib, binascii, os
from typing import Dict, Optional, Tuple

# ====== Konfigurasi PBKDF2 ======
PBKDF2_ITER = 120_000  # jumlah iterasi (samakan di seluruh app)

def pbkdf2_hash(password: str, salt: bytes) -> bytes:
    return hashlib.pbkdf2_hmac("sha256", password.encode("utf-8"), salt, PBKDF2_ITER, dklen=32)

def verify_password(password: str, salt_hex: str, hash_hex: str) -> bool:
    """Kembalikan True jika password cocok dengan salt/hash yang disimpan."""
    try:
        salt = binascii.unhexlify(salt_hex)
        expect = binascii.unhexlify(hash_hex)
    except Exception:
        return False
    got = pbkdf2_hash(password, salt)
    return hmac.compare_digest(got, expect)

def hash_new_password(password: str) -> Tuple[str, str]:
    """Utility: hasilkan (salt_hex, hash_hex) untuk password baru."""
    salt = os.urandom(16)
    h = pbkdf2_hash(password, salt)
    return binascii.hexlify(salt).decode(), binascii.hexlify(h).decode()

# ====== Data user (username -> record) ======
# Format record: {"salt_hex": str, "hash_hex": str, "role": "admin"|"user"}
USERS: Dict[str, Dict[str, str]] = {
    "nas": {
        "salt_hex": "d725e6ff1c6f38892fefdd24870128cc",
        "hash_hex": "1c21427302175ce3f728c4aca272e792f7bdead05d9f9fc4f67002668e1b9371",
        "role": "admin",
    },
    "admin": {
        "salt_hex": "ed78cd582b87d20ba5fb35017e33d29d",
        "hash_hex": "5f4fda1b36d0b39e0c1a63d6cda21d1086ce42b7ae9952bc08abcb9876064de7",
        "role": "admin",
    },
    "ptsp": {
        "salt_hex": "49cad1db41ef335569837d42ce42a6df",
        "hash_hex": "3646b5eb1e6c56e4e02578357be841e1cb280dc0d2e4f939debabc778c5acc9c",
        "role": "user",
    },
    # Tambahkan user lain di sini...
}

def get_user(username: str) -> Optional[Dict[str, str]]:
    """Ambil record user berdasarkan username (atau None jika tidak ada)."""
    return USERS.get(username)
